import { isString } from '../general';
import { getFilenameByPath } from './get-filename-by-path';

export function sanitizeFilename(filenameOrPath: string): string {
  if (!isString(filenameOrPath)) {
    return '';
  }

  const filename = getFilenameByPath(filenameOrPath);
  return filename
    .normalize('NFD')
    .replace(/[\u0300-\u036F]/g, '')
    .replace(new RegExp(/['/:<>\\|]/g), '-')
    .replace(new RegExp(/[Ææ]/g), 'AE')
    .replace(new RegExp(/[ÞВ]/g), 'B')
    .replace(new RegExp(/Ц/g), 'C')
    .replace(new RegExp(/[ĐД]/g), 'D')
    .replace(new RegExp(/[ЄЭ]/g), 'E')
    .replace(new RegExp(/א/g), 'A')
    .replace(new RegExp(/ב/g), 'B')
    .replace(new RegExp(/ץ/g), 'C')
    .replace(new RegExp(/ד/g), 'C')
    .replace(new RegExp(/Ĳ/g), 'IJ')
    .replace(new RegExp(/Ю/g), 'IO')
    .replace(new RegExp(/[ĿŁ]/g), 'L')
    .replace(new RegExp(/Ø/g), 'O')
    .replace(new RegExp(/Œ/g), 'OE')
    .replace(new RegExp(/[ŊИН]/g), 'N')
    .replace(new RegExp(/Я/g), 'R')
    .replace(new RegExp(/Щ/g), 'SCH')
    .replace(new RegExp(/Ш/g), 'SH')
    .replace(new RegExp(/Ŧ/g), 'T')
    .replace(new RegExp(/З/g), 'Z')
    .replace(new RegExp(/Ж/g), 'ZH')
    .replace(new RegExp(/[þБЪЬбвъь]/g), 'b')
    .replace(new RegExp(/ц/g), 'c')
    .replace(new RegExp(/צ/g), 'c')
    .replace(new RegExp(/[Чч]/g), 'ch')
    .replace(new RegExp(/[ðđд]/g), 'd')
    .replace(new RegExp(/[Əəэє]/g), 'e')
    .replace(new RegExp(/ע/g), 'e')
    .replace(new RegExp(/[ƒФф]/g), 'f')
    .replace(new RegExp(/[ГгҐґ]/g), 'g')
    .replace(new RegExp(/ג/g), 'g')
    .replace(new RegExp(/[הח]/g), 'h')
    .replace(new RegExp(/[Ħħ]/g), 'h')
    .replace(new RegExp(/ı/g), 'i')
    .replace(new RegExp(/י/g), 'i')
    .replace(new RegExp(/ю/g), 'io')
    .replace(new RegExp(/ĳ/g), 'ij')
    .replace(new RegExp(/[ĸк]/g), 'k')
    .replace(new RegExp(/[ךכ]/g), 'k')
    .replace(new RegExp(/[ŀłЛл]/g), 'l')
    .replace(new RegExp(/ל/g), 'l')
    .replace(new RegExp(/[םמ]/g), 'm')
    .replace(new RegExp(/м/g), 'm')
    .replace(new RegExp(/[ŉŋин]/g), 'n')
    .replace(new RegExp(/[ןנ]/g), 'n')
    .replace(new RegExp(/ø/g), 'o')
    .replace(new RegExp(/œ/g), 'oe')
    .replace(new RegExp(/[ףפ]/g), 'p')
    .replace(new RegExp(/[Пп]/g), 'p')
    .replace(new RegExp(/[Пп]/g), 'p')
    .replace(new RegExp(/ק/g), 'q')
    .replace(new RegExp(/ר/g), 'r')
    .replace(new RegExp(/я/g), 'r')
    .replace(new RegExp(/ס/g), 's')
    .replace(new RegExp(/ш/g), 'sh')
    .replace(new RegExp(/щ/g), 'sch')
    .replace(new RegExp(/ß/g), 'ss')
    .replace(new RegExp(/[ŧт]/g), 't')
    .replace(new RegExp(/[טת]/g), 't')
    .replace(new RegExp(/™/g), 'tm')
    .replace(new RegExp(/ו/g), 'v')
    .replace(new RegExp(/ש/g), 'w')
    .replace(new RegExp(/[Ыы]/g), 'y')
    .replace(new RegExp(/[ſз]/g), 'z')
    .replace(new RegExp(/ж/g), 'zh');
}
